import java.awt.geom.GeneralPath;
import java.awt.geom.Line2D;
import java.awt.geom.Point2D;
import java.awt.geom.Rectangle2D;
import java.awt.geom.Point2D.Double;
import java.util.Arrays;
import java.util.Collections;
import java.util.Comparator;
import java.util.HashSet;
import java.util.List;
import java.util.PriorityQueue;
import java.util.Queue;
import java.util.Set;
import java.util.TreeSet;
import java.util.Vector;

public class Practice1 {
	public static void main(String[] args) {
		//****진수변환****//
		//16 -> 10진수 변환
		System.out.println(Integer.parseInt("FF", 16));  //returns 255
		
		//2 -> 10진수 변환
		System.out.println(Integer.parseInt("1100110", 2)); //returns 102
		
		//10 -> 2진수 변환
		System.out.println(Integer.toBinaryString(12345)); //returns 11000000111001
		System.out.println(Integer.toString(12345, 2)); //returns 11000000111001
		
		//10 -> 16진수 변환
		System.out.println(Integer.toHexString(255)); //returns ff
		System.out.println(Integer.toString(255, 16)); //returns ff
		
		//10 -> 8진수 변환
		System.out.println(Integer.toOctalString(5678)); //returns 13056
		System.out.println(Integer.toString(5678, 8)); //returns 13056
		
		//****자료구조****//
		// 문자열 역순
		StringBuilder builder = new StringBuilder();
		builder.append("abcdefghi");
		
		builder.reverse();
		
		System.out.println(builder); //returns ihgfedcba
		
		// 배열 정렬
		int[] array = new int[] {10, 20, 1, 7, 1};
		
		Arrays.sort(array);
		
		for (int each : array) {
			System.out.print(each + " "); //returns 1 1 7 10 20
		}
		
		// 중복된 자료구조
		List<Integer> list = new Vector<Integer>();
		
		list.add(10);
		list.add(20);
		list.add(1);
		list.add(7);
		list.add(1);
		
		System.out.println(list); //returns [10, 20, 1, 7, 1]
		System.out.println(list.contains(10)); //returns true
		System.out.println(list.contains(2)); //returns false
		
		// 순차적으로 정렬
		Collections.sort(list);
		System.out.println(list);  //returns [1, 1, 7, 10, 20]
		
		// 역순으로 정렬
		Comparator<Integer> reverseOrdering = new Comparator<Integer>() {
			
			@Override
			public int compare(Integer o1, Integer o2) {
				return o2 - o1;
			}
		};
		
		Collections.sort(list, reverseOrdering);
		System.out.println(list); //returns [20, 10, 7, 1, 1]
				
		// HashSet과 TreeSet
		// 중복되지 않고 정렬되지 않은 자료구조
		Set<Integer> set = new HashSet<Integer>();
		
		set.add(10);
		set.add(20);
		set.add(1);
		set.add(7);
		set.add(1);
		
		System.out.println(set); //returns [1, 20, 7, 10]
		
		// 중복되지 않고 정렬된 자료구조
		Set<Integer> set2 = new TreeSet<Integer>();
		
		set2.add(10);
		set2.add(20);
		set2.add(1);
		set2.add(7);
		set2.add(1);
		
		System.out.println(set2);  //returns [1, 7, 10, 20]
		
		// 역순으로 정렬
		Comparator<Integer> reverseOrdering2 = new Comparator<Integer>() {
			
			@Override
			public int compare(Integer o1, Integer o2) {
				return o2 - o1;
			}
		};
		
		// 중복되지 않고 역순으로 정렬된 자료구조
		Set<Integer> set3 = new TreeSet<Integer>(reverseOrdering2);
		
		set3.add(10);
		set3.add(20);
		set3.add(1);
		set3.add(7);
		set3.add(1);
		
		System.out.println(set3); //returns	[20, 10, 7, 1]
		
		//PriorityQueue
		//MAX Heap 구조를 유지하기 위한 자료구조
		Queue<Integer> queue = new PriorityQueue<Integer>(10, reverseOrdering);
		
		queue.add(10);
		queue.add(20);
		queue.add(1);
		queue.add(7);
		queue.add(100);
		
		System.out.println(queue); //returns [100, 20, 1, 7, 10]
		queue.poll();
		System.out.println(queue); //returns [20, 10, 1, 7]
		queue.poll();
		System.out.println(queue); //returns [10, 7, 1]
		queue.poll();
		System.out.println(queue); //returns [7, 1]
		
		//MAX Hheap 구조를 유지하기 위한 자료구조(순차)
		Queue<Integer> queue2 = new PriorityQueue<Integer>(10);
		queue2.offer(10);
		for (int i = 1; i < 10; i++) {
			queue2.offer(i);
		}
		
		System.out.println(Arrays.toString(queue2.toArray())); //returns [1, 3, 2, 7, 4, 5, 6, 10, 8, 9]
		
//		while(!queue.isEmpty()) {
//			System.out.println(queue.poll());
//			System.out.println();
//		}
		
		System.out.println(queue2); //returns [1, 3, 2, 7, 4, 5, 6, 10, 8, 9]
		queue2.poll(); //가장 먼저 보관한 값 꺼내고 반환
		System.out.println(queue2); //returns [2, 3, 5, 7, 4, 9, 6, 10, 8]
		queue2.poll();
		System.out.println(queue2); //returns [3, 4, 5, 7, 8, 9, 6, 10]
		queue2.poll();
		System.out.println(queue2); //returns [4, 7, 5, 10, 8, 9, 6]
		queue2.poll();
		System.out.println(queue2); // returns [5, 7, 6, 10, 8, 9]
		
		//****기하학****//
		//두 선이 교차하는지 여부 확인 : 인스턴스 메소드 사용
		Line2D line1 = new Line2D.Double(0, 0, 10, 10);
		Line2D line2 = new Line2D.Double(9, 9, 0, 0);
		System.out.println(line1.intersectsLine(line2)); //returns true
		
		//두 선이 교차하는지 여부 확인 : static 메소드 사용
		System.out.println(Line2D.linesIntersect(0, 0, 10, 10, 9, 9, 0, 0)); //returns true
		
		//한 사각형이 다른 한 사각형 안에 포함되는지 여부와 교차하는지 여부
		Rectangle2D r1 = new Rectangle2D.Double(0, 0, 20, 20);
		Rectangle2D r2 = new Rectangle2D.Double(1, 1, 5, 5);
		
		System.out.println(r1.contains(r2)); //returns true
		System.out.println(r2.contains(r1)); //returns false
		System.out.println(r1.intersects(r2)); //returns true
		System.out.println(r2.intersects(r1)); //returns ture
		
		//두 사각형이 겹치는 부분 구하기
		Rectangle2D dest = new Rectangle2D.Double();
		Rectangle2D.intersect(r1, r2, dest);
		System.out.println(dest); //returns [x=1.0,y=1.0,w=5.0,h=5.0]
		
		//사각형내에 점이 존재하는지 여부
		Point2D p1 = new Point2D.Double(2, 2);
		Point2D p2 = new Point2D.Double(30, 30);
		
		System.out.println(r1.contains(p1)); //returns true
		System.out.println(r1.contains(p2)); //returns false
		
		//다각형내에 점이 포함되는지 여부
		int[] xPoints = {10, 50, 100, 150, 200, 250, 300, 350};
		int[] yPoints = {10, 50,  10,  50,  10,  50,  10,  50};
		GeneralPath polygon = new GeneralPath(GeneralPath.WIND_EVEN_ODD, xPoints.length);
		
		polygon.moveTo(xPoints[0], yPoints[0]);
		for (int i = 1; i < xPoints.length; i++) {
			polygon.lineTo(xPoints[i], yPoints[i]);
		}
		
		polygon.closePath();
				
		Point2D p3 = new Point2D.Double(20, 20);
		Point2D p4 = new Point2D.Double(1, 1);
		
		System.out.println(polygon.contains(p3)); //returns true
		System.out.println(polygon.contains(p4)); //returns false
	}
}
