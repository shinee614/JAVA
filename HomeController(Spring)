package com.kopo.ju;

import java.io.UnsupportedEncodingException;
import java.util.Locale;

import javax.servlet.http.HttpServletRequest;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;


/**
 * Handles requests for the application home page.
 */
@Controller
public class HomeController {

	private static final Logger logger = LoggerFactory.getLogger(HomeController.class);
	
	@RequestMapping(value = "/", method = RequestMethod.GET)
	public String home(Locale locale, Model model) {
		return "home";
	}

	@RequestMapping(value = "/create", method = RequestMethod.GET)
	public String create(Locale locale, Model model) {
		DB db = new DB<Memo>("c:\\tomcat\\color.db", "memo");
		
		if(db.open()) {
			if(db.createTable(new Memo())) {
				model.addAttribute("message","테이블을 생성되었습니다.");
			}else {
				model.addAttribute("message","테이블 생성에 실패하였습니다.");
			}
			db.close();
		}else{
			model.addAttribute("message", "DB파일을 사용할 수 없습니다.");
		};
		
		return "message";
	}
	
//	@RequestMapping(value = "/insert", method = RequestMethod.GET)
//	public String insert(Locale locale, Model model, @RequestParam("memo") String memo) {
//		DB db = new DB<Memo>("c:\\tomcat\\color.db", "memo");
//		
//		if(db.open()) {
//			if(db.insertData(new Memo(memo))){
//				model.addAttribute("message","새 데이터를 추가했습니다.");
//			}else{
//				model.addAttribute("message","데이터 추가에 실패했습니다.");
//			};
//			db.close();
//		}else{
//			model.addAttribute("message", "DB파일을 사용할 수 없습니다.");
//		};
//		
//		return "message";
//	}
	
	@RequestMapping(value = "/insert", method = RequestMethod.GET)
	public String insert(Locale locale, Model model, HttpServletRequest request) {
		try {
			request.setCharacterEncoding("UTF-8");
		} catch (UnsupportedEncodingException e) {
			e.printStackTrace();
		}
		
		DB db = new DB<Memo>("c:\\tomcat\\color.db", "memo");
		
		if(db.open()) {
			if(request.getParameter("memo") != null && db.insertData(new Memo(request.getParameter("memo")))) {
				model.addAttribute("message","새 데이터를 추가했습니다.");
			}else{
				model.addAttribute("message","데이터 추가에 실패했습니다.");
			};
			db.close();
		}else{
			model.addAttribute("message", "DB파일을 사용할 수 없습니다.");
		};
		
		return "message";
	}
	
//	@RequestMapping(value = "/update", method = RequestMethod.GET)
//	public String update(Locale locale, Model model, @RequestParam("idx") int idx, @RequestParam("memo") String memo) {
//		DB db = new DB<Memo>("c:\\tomcat\\color.db", "memo");
//		
//		if(db.open()) {
//			if(db.updateData(new Memo(idx, memo))){
//				model.addAttribute("message","데이터를 수정했습니다.");
//			}else{
//				model.addAttribute("message","데이터 수정에 실패했습니다.");
//			};
//			db.close();
//		}else{
//			model.addAttribute("message", "DB파일을 사용할 수 없습니다.");
//		};
//		
//		return "message";
//	}
	
	@RequestMapping(value = "/update", method = RequestMethod.GET)
	public String update(Locale locale, Model model, HttpServletRequest request) {
		try {
			request.setCharacterEncoding("UTF-8");
		} catch (Exception e) {
			e.printStackTrace();
		}
		
		//따로 빼서 명시하는 방법
//		if (request.getParameter("idx") == null) {
//			model.addAttribute("message", "입력 데이터가 잘못 되었습니다.");
//			return "message";
//		}
		
		DB db = new DB<Memo>("c:\\tomcat\\color.db", "memo");
		
		if(db.open()) {
			if(request.getParameter("idx") != null 
					&& request.getParameter("memo") != null 
					&& DB.isIntegerString(request.getParameter("idx")) 
					&& db.updateData(new Memo(Integer.parseInt(request.getParameter("idx")), request.getParameter("memo")))){
				model.addAttribute("message","데이터를 수정했습니다.");
			}else{
				model.addAttribute("message","데이터 수정에 실패했습니다.");
			};
			db.close();
		}else{
			model.addAttribute("message", "DB파일을 사용할 수 없습니다.");
		};
		
		return "message";
	}
	
//	private boolean isIntegerString(String numericString) {
//		try {
//			int result = Integer.parseInt(numericString);
//			//정규표현식으로
////			if (numericString.matches("[+-]?[0-9]{1,}")) {
////				return true;
////			}
//			return true;
//		} catch (Exception e) {
//			e.printStackTrace();
//		}
//		return false;
//	}
}
