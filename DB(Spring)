package com.kopo.ju;

import java.lang.reflect.Field;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;

import org.sqlite.SQLiteConfig;

public class DB<T> { // DB에 Generic <T> 선언
	private Connection connection;
	private String dbFileName;
	private String dbTableName;
	static {
		try {
			Class.forName("org.sqlite.JDBC");
		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	// DB이름, 테이블이름 생성
	public DB(String databaseFileName, String dbTableName) {
		this.dbFileName = databaseFileName;
		this.dbTableName = dbTableName;
	}

	// 데이터 접근
	public boolean open() {
		SQLiteConfig config = new SQLiteConfig();
		try {
			this.connection = DriverManager.getConnection("jdbc:sqlite:/" + this.dbFileName, config.toProperties());
			return true;
		} catch (Exception e) {
			e.printStackTrace();
		}
		return false;
	}

	public void close() {
		if (this.connection != null) {
			try {
				this.connection.close();
			} catch (SQLException e) {
				e.printStackTrace();
			}
		}
	}

	// 최초 한번만 실행
	public void createTable() {
		String fieldString = "";
		fieldString = fieldString + "idx INT PRIMARY KEY";
		fieldString = fieldString + ", name TEXT";
		fieldString = fieldString + ", middleScore INT";
		fieldString = fieldString + ", finalScore INT";
		String query = "CREATE TABLE " + this.dbTableName + " (" + fieldString + ")";
		try {
			Statement statement = this.connection.createStatement();
			statement.executeUpdate(query);
			statement.close();
		} catch (Exception e) {
			e.printStackTrace();
		}

	}

	public boolean createTable(T t) {
		Class<?> dataClass = t.getClass();
		Field[] dataClassFields = dataClass.getDeclaredFields();

		String fieldString = "";

		for (Field field : dataClassFields) {
			if (!fieldString.isEmpty()) {
				fieldString = fieldString + ",";
			}
			String fieldName = field.getName();
			String fieldType = field.getType().toString();
			fieldString = fieldString + fieldName;
			if (fieldName.matches("idx")) {
				fieldString = fieldString + " INTEGER PRIMARY KEY AUTOINCREMENT";
			} else if (fieldType.matches("(int|long|short)")) {
				fieldString = fieldString + " INTEGER";
			} else if (fieldType.matches("(float|double)")) {
				fieldString = fieldString + " REAL";
			} else if (fieldType.matches(".*String")) {
				fieldString = fieldString + " TEXT";
			}
		}
//		fieldString = fieldString + "idx INT PRIMARY KEY";
//		fieldString = fieldString + ", name TEXT";
//		fieldString = fieldString + ", middleScore INT";
//		fieldString = fieldString + ", finalScore INT";
		String query = "CREATE TABLE " + this.dbTableName + " (" + fieldString + ")";
//		String query = "CREATE TABLE " + this.dbTableName + " (idx INT PRIMARY KEY, name TEXT, middleScore INT, finalScore INT)";
		try {
			Statement statement = this.connection.createStatement();
			statement.executeUpdate(query);
			statement.close();
			return true;
		} catch (Exception e) {
			e.printStackTrace();
			return false;
		}
	}

	public void insertData(Student student) {
		String fieldString = "";
		fieldString = fieldString + "name";
		fieldString = fieldString + ", middleScore";
		fieldString = fieldString + ", finalScore";
		String valueString = "";
		valueString = valueString + "'" + student.name + "'";
		valueString = valueString + "'" + student.middleScore + "'";
		valueString = valueString + "'" + student.finalScore + "'";
		String query = "INSERT INTO  i" + this.dbTableName + " (name, middleScore, finalScore) VALUES('" + student.name
				+ "','" + student.middleScore + "','" + student.finalScore + "')";
		try {
			Statement statement = this.connection.createStatement();
			statement.executeUpdate(query);
			statement.close();
		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	// statement 사용해서 쿼리 실행하는 방법//
//	public boolean insertData(T t) {
//		Class<?> dataClass = t.getClass();
//		Field[] dataClassFields = dataClass.getDeclaredFields();
//
//		String fieldString = "";
//		String valueString = "";
//
//		for (Field field : dataClassFields) {
//			String fieldName = field.getName();
//			String fieldType = field.getType().toString();
//			if (fieldName.matches("idx")) {
//				continue;
//			}
//			if (!fieldString.isEmpty()) {
//				fieldString = fieldString + ",";
//			}
//			if (!valueString.isEmpty()) {
//				valueString = valueString + ",";
//			}
//			fieldString = fieldString + fieldName;
//			try {
//				if (fieldType.matches(".*String")) {
//					valueString = valueString + "'" + field.get(t) + "'";
//				} else {
//					valueString = valueString + field.get(t);
//				}
//			} catch (IllegalArgumentException e) {
//				e.printStackTrace();
//			} catch (IllegalAccessException e) {
//				e.printStackTrace();
//			}
//		}
//		String query = "INSERT INTO " + this.dbTableName + " (" + fieldString + ") VALUES (" + valueString + ")";
//		try {
//			Statement statement = this.connection.createStatement();
//			statement.executeUpdate(query);
//			statement.close();
//			return true;
//		} catch (Exception e) {
//			e.printStackTrace();
//			return false;
//		}
//	}

	// preparedStatement 사용하는 방법//
	public boolean insertData(T t) {
		Class<?> dataClass = t.getClass();
		Field[] dataClassFields = dataClass.getDeclaredFields();

		String fieldString = "";
		String valueString = "";

		class PreparedValue {
			int type = 0;
			int intValue = 0;
			double floatValue = 0;
			String stringValue = "";

			PreparedValue(int intValue) {
				this.type = 1;
				this.intValue = intValue;
			}

			PreparedValue(double floatValue) {
				this.type = 2;
				this.floatValue = floatValue;
			}

			PreparedValue(String stringValue) {
				this.type = 3;
				this.stringValue = stringValue;
			}
		}

		ArrayList<PreparedValue> preparedValue = new ArrayList<PreparedValue>();

		for (Field field : dataClassFields) {
			String fieldName = field.getName();
			String fieldType = field.getType().toString();
			if (fieldName.matches("idx")) {
				continue;
			}
			if (!fieldString.isEmpty()) {
				fieldString = fieldString + ",";
			}
			if (!valueString.isEmpty()) {
				valueString = valueString + ",";
			}
			fieldString = fieldString + fieldName;
			try {
				if (fieldType.matches("(int|long|short)")) {
					preparedValue.add(new PreparedValue(field.getInt(t)));
					valueString = valueString + "?";
				} else if (fieldType.matches("(float|double)")) {
					preparedValue.add(new PreparedValue(field.getDouble(t)));
					valueString = valueString + "?";
				} else if (fieldType.matches(".*String")) {
					preparedValue.add(new PreparedValue(field.get(t).toString()));
					valueString = valueString + "?";
				}
			} catch (IllegalArgumentException e) {
				e.printStackTrace();
			} catch (IllegalAccessException e) {
				e.printStackTrace();
			}
		}
		String query = "INSERT INTO " + this.dbTableName + " (" + fieldString + ") VALUES (" + valueString + ")";
		//System.out.println(query);
		try {
			PreparedStatement statement = this.connection.prepareStatement(query);
			for (int i = 0; i < preparedValue.size(); i++) {
				if (preparedValue.get(i).type == 1) {
					statement.setInt(i + 1, preparedValue.get(i).intValue);
				} else if (preparedValue.get(i).type == 2) {
					statement.setDouble(i + 1, preparedValue.get(i).floatValue);
				} else if (preparedValue.get(i).type == 3) {
					statement.setString(i + 1, preparedValue.get(i).stringValue);
				}
			}
			statement.executeUpdate();
			statement.close();
			return true;
		} catch (Exception e) {
			e.printStackTrace();
			return false;
		}
	}

	public void updateData(int idx, String memo) {
		String setString = "memo='" + memo + "'";
		String whereString = "idx=" + idx;
		String query = "UPDATE " + this.dbTableName + " SET " + setString + " WHERE " + whereString;
		try {
			Statement statement = this.connection.createStatement();
			statement.executeUpdate(query);
			statement.close();
		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	// statement 사용하는 방법 //
//	public boolean updateData(T t) {
//		Class<?> dataClass = t.getClass();
//		Field[] dataClassFields = dataClass.getDeclaredFields();
//		String setString = "";
//		String whereString = "";
//		for (Field field : dataClassFields) {
//			if (!setString.isEmpty()) {
//				setString = setString + ",";
//			}
//			String fieldName = field.getName();
//			String fieldType = field.getType().toString();
//			try {
//				if (fieldName.matches("idx")) {
//					whereString = "idx=" + field.get(t);
//				} else if (fieldType.matches(".*String")) {
//					setString = setString + fieldName + "='" + field.get(t) + "'";
//				} else {
//					setString = setString + fieldName + "='" + field.get(t);
//				}
//			} catch (IllegalArgumentException e) {
//				e.printStackTrace();
//			} catch (IllegalAccessException e) {
//				e.printStackTrace();
//			} catch(Exception e) {
//				e.printStackTrace();
//			}
//		}
//		String query = "UPDATE " + this.dbTableName + " SET " + setString + " WHERE " + whereString;
//		try {
//			Statement statement = this.connection.createStatement();
//			statement.executeUpdate(query);
//			statement.close();
//			return true;
//		} catch (Exception e) {
//			e.printStackTrace();
//		}
//		return false;
//	}

	// preparedStatement 사용하는 방법, preparedValue에 object 객체 사용 //
	public boolean updateData(T t) {
		Class<?> dataClass = t.getClass();
		Field[] dataClassFields = dataClass.getDeclaredFields();
		String setString = "";
		String whereString = "";

		class PreparedValue {
			boolean isString;
			Object value;

			PreparedValue(boolean isString, Object value) {
				this.isString = isString;
				this.value = value;
			}
		}
		ArrayList<PreparedValue> preparedValue = new ArrayList<PreparedValue>();

		for (Field field : dataClassFields) {
			if (!setString.isEmpty()) {
				setString = setString + ",";
			}
			String fieldName = field.getName();
			String fieldType = field.getType().toString();
			try {
				if (fieldName.matches("idx")) {
					whereString = "idx=" + field.get(t);
				} else if (fieldType.matches(".*String")) {
					preparedValue.add(new PreparedValue(true, field.get(t)));
					setString = setString + fieldName + "=?";
				} else {
					preparedValue.add(new PreparedValue(true, field.get(t)));
					setString = setString + fieldName + "=?";
				}
			} catch (IllegalArgumentException e) {
				e.printStackTrace();
			} catch (IllegalAccessException e) {
				e.printStackTrace();
			} catch (Exception e) {
				e.printStackTrace();
			}
		}
		String query = "UPDATE " + this.dbTableName + " SET " + setString + " WHERE " + whereString;
		try {
			PreparedStatement statement = this.connection.prepareStatement(query);
			for (int i = 0; i < preparedValue.size(); i++) {
				if (preparedValue.get(i).isString) {
					statement.setString(i + 1, preparedValue.get(i).value.toString());
				} else {
					statement.setObject(i + 1, preparedValue.get(i).value);
				}
			}
			statement.executeUpdate();
			statement.close();
			return true;
		} catch (Exception e) {
			e.printStackTrace();
			return false;
		}
	}

	// 정수를 문자로 인식
	public static boolean isIntegerString(String numericString) {
		try {
			int result = Integer.parseInt(numericString);
			// 정규표현식으로
//			if (numericString.matches("[+-]?[0-9]{1,}")) {
//				return true;
//			}
			return true;
		} catch (Exception e) {
			e.printStackTrace();
		}
		return false;
	}

	// 실수를 문자로 인식
	public static boolean isFloatString(String numericString) {
		try {
			double result = Double.parseDouble(numericString);
			// 정규표현식으로
//			if (numericString.matches("[+-]?[0-9]{1,}")) {
//				return true;
//			}
			return true;
		} catch (Exception e) {
			e.printStackTrace();
		}
		return false;
	}
}
